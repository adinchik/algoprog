import label from "../lib/label"
import level from "../lib/level"
import link from "../lib/link"
import page from "../lib/page"
import problem from "../lib/problem"
import topic from "../lib/topic"

module17501 = () ->
    page("Про сайт Codeforces", String.raw"""
        <div class="box generalbox generalboxcontent boxaligncenter clearfix"><h1>Про сайт Codeforces</h1>
        <p>Если вы добрались до сюда, то вы уже довольно хорошо программируете, и имеет смысл не только решать задачи нашего курса, но также и дополнительно более-менее регулярно тренироваться. Рекомендую вам зарегистрироваться на сайте <a href="https://codeforces.com">codeforces.com</a> (есди он у вас вдруг открывается на английском языке, то в правом верхнем углу можно переключиться на русский), изучить его и время от времени принимать участие в его "раундах".</p>
        
        <p>А именно, на этом сайте регулярно проводятся соревнования — "раунды". Они бывают в среднем раз в одну-две недели (каждый раунд писать не обязательно, но я бы вам рекомендовал хотя бы раз в месяц-полтора писать раунды). Это не какие-то призовые олимпиады и т.п., в них имеет смысл участвовать из интереса, и с целью тренировки. Раунды проводятся по разным правилам, ниже я опишу наиболее распространенный вариант.</p>
        
        <p>Во-первых, у всех участников codeforces есть так называемый "рейтинг" — целое число, показывающее, насколько вы успешно выступали на раундах codeforces. Если вы хорошо выступаете, ваш рейтинг будет расти, если плохо, то падать. От рейтинга зависит цвет, которым ваш ник пишется на страничках codeforces. Кроме того, все участники codeforces делятся на два "дивизиона" по рейтингу. Вы изначально участвуете во втором дивизионе, если ваш рейтинг становится достаточно высоким (1700 и выше), то вы переходите в первый дивизион.</p>
        
        <p>Раунды обычно проводятся отдельно по дивизионам. Наиболее часто проводятся два параллельных раунда — для первого и для второго дивизиона; задачи частично пересекаются, частично отличаются. Бывают объединенные раунды для двух дивизионов, бывают раунды только для второго дивизиона. Бывают раунды по совсем особым схемам и правилам. Большинство раундов являются "рейтинговыми", т.е. результаты участия в них влияют на ваш рейтинг, но бывают и "нерейтинговые" раунды. Обычно о рейтинговости раунда предупреждают заранее.</p>
        
        <p>Наиболее часто раунды проводятся по следующим правилам. Для участия в раунде надо заранее зарегистрироваться на этот раунд (т.е. не просто зарегистрироваться на сайте, но еще и нажать специальную кнопку "зарегистрироваться на раунд"), обычно регистрация на раунд заканчивается минут за 5-10 до начала раунда. Раунд длится 2-2.5 часа. Вам предлагается 5 задач, упорядоченных по сложности (по крайней мере как думают авторы задач). У каждой задачи есть своя стоимость, определяющая количество баллов, которые вы получите при успешном решении этой задачи. У простых задач стоимость невысокая (обычно от 500), у сложных — высокая (обычно 2500). (Эти баллы не имеют прямого отношения к баллам рейтинга.)</p>
        
        <p>Вы можете решать задачи в произвольном порядке (хотя обычно все решают от простых к сложным), на любых допустимых языках программирования. Когда вы считаете, что вы написали решение, вы можете его отправить на проверку (аналогично тому, как вы делаете на нашем сайте). Ваша задача будет проверена на так называемых "претестах" — некотором наборе тестов, который не обязательно является полным (т.е. вы можете пройти все претесты, даже если ваше решение не совсем правильное). Если ваше решение не прошло хотя бы один претест, оно не принимается, и вам об этом сообщают. Если оно прошло все претесты, то оно "принимается на окончательную проверку", которая будет проходить в конце раунда.</p>
        
        <p>Если ваше решение не прошло претесты, вы можете его пересдавать. Если оно прошло все претесты, вы все равно можете его пересдать — если, например, вы нашли у себя ошибку. При этом за каждую лишнюю посылку вы впоследствии получите 50 штрафных баллов.</p>
        
        <p>Стоимость задач падает со временем, к концу контеста опускаясь до примерно половины начальной стоимости. Соответственно, если в итоге окажется, что вы решили задачу, то вы получите столько баллов, сколько она стоила в момент вашей последней посылки, минус 50 баллов за каждую предыдущую посылку. В течение раунда вы можете смотреть его текущие результаты, т.е. кто что на данный момент решил.</p>
        
        <p>Вдобавок ко всему этому, существует система "взломов". А именно, если ваше решение по некоторой задаче прошло претесты, вы можете его "заблокировать" (нажав на соответствующую кнопку в интерфейсе). После этого вы уже не можете перепосылать эту задачу, но зато вы получаете возможность смотреть исходные коды других участников по этой задаче (только те, что прошли претесты). Чтобы вам не возиться в огромной таблице результатов, все участники перед раундом псевдослучайным образом делятся по "комнатам", и вы можете просматривать решения только участников из своей комнаты. Чтобы просмотреть уод участника, надо сделать двойной щелчок по соответствующей ячейке в таблице результатов комнаты.</p>
        
        <p>Цель просмотра решения — попробовать найти в нем ошибки. Если вы думаете, что вы нашли ошибку в решении, вы можете придумать тест, на котором, как вы думаете, это решение будет работать неправильно, и отправить этот тест в систему — попробовать "взломать" это решение. Система тут же проверит это решение на вашем тесте и, если оно действительно не работает, то вы получите плюс 100 баллов, если вы ошиблись, то вы получаете минус 50 баллов. В случае успешного взлома участник, которого взломали, это увидит, и (если он еще не заблокировал задачу) сможет перепослать свое решение. Если он уже заблокировал задачу, то ему не повезло. Соответственно, аналогично другие участники могут взламывать ваши решения; при этом, конечно, вы не видите тест, которым вас взломали.</p>
        
        <p>При просмотре решения вы не можете куда-либо копировать его текст; вы должны смотреть код чисто глазами.</p>
        
        <p>После окончания времени раунда все решения перетестируются на полноценном наборе тестов. Теперь если у вас все-таки было неверное решение, то оно почти наверняка не пройдет какой-нибудь из полноценных тестов. После этого вычисляются окончательные результаты. А именно, по каждой задаче, которую вы сдали, вам начисляются баллы, соответствующие стоимости задачи в тот момент, когда вы послали по ней последнее решение, минус 50 баллов за каждую предыдущую посылку по этой задаче. По тем задачам, которые вы так и не сдали, штрафные баллы не начисляются. Добавляются результаты взломов (100 баллов за успешный взлом, 50 баллов за неуспешный), и получается ваш итоговый балл, определяющий место, которое вы в итоге занимаете. От этого места зависит прирост вашего рейтинга.</p>
        
        <p>После каждого раунда публикуются краткие разборы задач (в тот же день или через день-два). Рекомендую вам их читать. Кроме того, после окончания раунда вы все еще можете "дорешивать" — отправлять задачи на проверку просто чтобы дописать или исправить ошибки, которые у вас были. На результаты раунда это, конечно, не влияет, но все-таки разобраться в своих ошибках нужно.</p>
        
        <p>Кроме того, на этом сайте есть много другой полезной информации. Во-первых, там есть функционал блогов, и пользователи часто пишут различные тексты и статьи на темы, связанные с программированием. На многих страницах сайта справа есть список постов, которые в данный момент обсуждаются. Во-вторых, на сайте есть раздел "тренировки", куда выкладываются задачи многих прошедших олимпиад; их можно самостоятельно решать в учебных целях.</p>
        
        <h4>Полезные ссылки</h4>
        <a href="https://codeforces.com/help">Общая справка по codeforces</a><br>
        <a href="https://codeforces.com/blog/entry/456">Полные правила раундов</a></div>
    """, {skipTree: true})

topic_module_48572 = () ->
    return topic("Про сайт codeforces", null, [
        module17501(),
        link("https://informatics.msk.ru/mod/resource/view.php?id=48572", "Как решать другие контесты и codeforces"),
    ])

module24698 = () ->
    page("Про язык C++", String.raw"""
        <div class="box generalbox generalboxcontent boxaligncenter clearfix"><p>Если вы добрались до сюда, но еще пишете на паскале или на питоне, то, <b>возможно</b>, вам стоит потихоньку переходить на C++. Это не обозначает, что надо прямо сейчас все бросать и изучать новый язык программирования; это сильно зависит, во-первых, от вас, во-вторых, от текущего времени года. Я советую переходить на новый язык программирования весной-летом, когда основные олимпиады одного года уже закончились, а олимпиады следующего года еще не начались, но это также сильно зависит от сам самих (11-классникам, возможно, нет большого смысла переходить на C++ в школе — вас ему научат в университете, и т.п.) Поэтому <b>прежде чем переходить на C++, посоветуйтесь со мной</b>.</p>
        
        <p>На самом деле даже уровень 3А — это немного рановато для перехода на C++, вполне можно и на паскале и на питоне заниматься и на более высоких уровнях, но в любом случае, если вы добрались до сюда, то поговорите про C++ со мной. Помимо уровня, у меня есть еще один критерий: переходить на C++ имеет смысл, если вы с довольно высокой вероятностью станете призерами областной олимпиады; но, опять-таки, этот критерий не строгий.</p>
        
        <p>К сожалению, сложно посоветовать какой-то конкретный ресурс или книгу для изучения C++. Язык довольно сложный, и есть определенный риск научиться ему неправильно, но вы уже знаете другой язык и понимаете все основные конструкции, поэтому вам будет намного проще изучать C++, чем если бы вы его учили с нуля. Попросите меня на занятии объяснить вам самые основы языка (в том числе — как работать в средах разработки под C++), можете посдавать ряд задач с уровней 1А-1Б, чтобы понять основные конструкции языка, а дальше продолжайте решать задачи на вашем текущем уровне, но на C++.</p>
        
        <p>Посмотрите <a href="https://sis.khashaev.ru/2013/july/courses/">спецкурс из ЛКШ.2013</a>.</p>
        
        <p>Еще один из полезных ресурсов — <a href="https://github.com/alzobnin/hse-cs-prog/tree/master/2016-2">материалы к лекциям Алексея Зобнина на ФКН ВШЭ</a>. Нажимайте там на имена файлов вида 01.cpp, 02.cpp и т.д. (НЕ на надписи типа "лекция 1"), читайте код и комментарии. В первую очередь вам полезны материалы нескольких первых лекций, но для общего представления можете почитать и дальше.</p>
        
        <p>При этом важный момент: <b>не забывайте тот язык программирования, на котором вы сейчас пишете</b>, особенно если это питон! Питон очень удобен в тех задачах, где не столь строгие ограничения по времени, да и вообще он будет очень полезен вам дальше в жизни, поэтому, если вы уже пишете на питоне, то не забывайте его, и используйте попеременно C++ и питон для задач, выбирая, какой язык лучше, для каждой задачи отдельно. Если вы пишете на паскале, то в принципе нет большой необходимости поддерживать этот навык, но все равно лучше его не забывать, особенно на случай, если вдруг у вас какая-то задача не будет решаться на C++.</p>
        
        </div>
    """, {skipTree: true})

module24698 = () ->
    page("Про язык C++", String.raw"""
        <div class="box generalbox generalboxcontent boxaligncenter clearfix"><p>Если вы добрались до сюда, но еще пишете на паскале или на питоне, то, <b>возможно</b>, вам стоит потихоньку переходить на C++. Это не обозначает, что надо прямо сейчас все бросать и изучать новый язык программирования; это сильно зависит, во-первых, от вас, во-вторых, от текущего времени года. Я советую переходить на новый язык программирования весной-летом, когда основные олимпиады одного года уже закончились, а олимпиады следующего года еще не начались, но это также сильно зависит от сам самих (11-классникам, возможно, нет большого смысла переходить на C++ в школе — вас ему научат в университете, и т.п.) Поэтому <b>прежде чем переходить на C++, посоветуйтесь со мной</b>.</p>
        
        <p>На самом деле даже уровень 3А — это немного рановато для перехода на C++, вполне можно и на паскале и на питоне заниматься и на более высоких уровнях, но в любом случае, если вы добрались до сюда, то поговорите про C++ со мной. Помимо уровня, у меня есть еще один критерий: переходить на C++ имеет смысл, если вы с довольно высокой вероятностью станете призерами областной олимпиады; но, опять-таки, этот критерий не строгий.</p>
        
        <p>К сожалению, сложно посоветовать какой-то конкретный ресурс или книгу для изучения C++. Язык довольно сложный, и есть определенный риск научиться ему неправильно, но вы уже знаете другой язык и понимаете все основные конструкции, поэтому вам будет намного проще изучать C++, чем если бы вы его учили с нуля. Попросите меня на занятии объяснить вам самые основы языка (в том числе — как работать в средах разработки под C++), можете посдавать ряд задач с уровней 1А-1Б, чтобы понять основные конструкции языка, а дальше продолжайте решать задачи на вашем текущем уровне, но на C++.</p>
        
        <p>Посмотрите <a href="https://sis.khashaev.ru/2013/july/courses/">спецкурс из ЛКШ.2013</a>.</p>
        
        <p>Еще один из полезных ресурсов — <a href="https://github.com/alzobnin/hse-cs-prog/tree/master/2016-2">материалы к лекциям Алексея Зобнина на ФКН ВШЭ</a>. Нажимайте там на имена файлов вида 01.cpp, 02.cpp и т.д. (НЕ на надписи типа "лекция 1"), читайте код и комментарии. В первую очередь вам полезны материалы нескольких первых лекций, но для общего представления можете почитать и дальше.</p>
        
        <p>При этом важный момент: <b>не забывайте тот язык программирования, на котором вы сейчас пишете</b>, особенно если это питон! Питон очень удобен в тех задачах, где не столь строгие ограничения по времени, да и вообще он будет очень полезен вам дальше в жизни, поэтому, если вы уже пишете на питоне, то не забывайте его, и используйте попеременно C++ и питон для задач, выбирая, какой язык лучше, для каждой задачи отдельно. Если вы пишете на паскале, то в принципе нет большой необходимости поддерживать этот навык, но все равно лучше его не забывать, особенно на случай, если вдруг у вас какая-то задача не будет решаться на C++.</p>
        
        </div>
    """, {skipTree: true})

topic_module_24698 = () ->
    return topic("Про язык C++", null, [
        module24698(),
        module24698(),
    ])

topic_16282 = () ->
    return topic("Бинарный поиск (поиск делением пополам)", "3А: Задачи на бинарный поиск", [
        label("<a href=\"https://notes.algoprog.ru/binsearch/07_binsearch_main.html\">Теория по бинарному поиску</a>"),
        label("См. также <a href=\"https://sis.khashaev.ru/2013/july/b-prime/\">видеозаписи лекций ЛКШ параллели B'</a>, раздел «Бинарный поиск» (хотя там несколько устаревший подход к поиску элемента в массиве)."),
        problem(3570),
        problem(4),
        problem(2),
        problem(1923),
    ])

topic_16277 = () ->
    return topic("Поиск в ширину", "3А: Задачи на поиск в ширину", [
        label("См. <a href=\"https://sis.khashaev.ru/2013/august/c-prime/\">видеозаписи лекций ЛКШ параллели C'</a>, раздел «Поиск в ширину (BFS)»<br>\nСм. <a href=\"https://sis.khashaev.ru/2008/august/b-prime/\">видеозаписи лекций ЛКШ параллели B' 2008</a>, раздел «Поиск в ширину» (там есть и довольно продвинутые темы, которые вам пока не нужны)<br>"),
        problem(160),
        problem(161),
        problem(646),
        problem(645),
        problem(1329),
        problem(510),
    ])

topic_16274 = () ->
    return topic("Проcтые графы", "3А: Задачи на простые графы", [
        label("Теории тут пока нет. Можете прочитать основные вещи <a href=\"https://ru.wikipedia.org/wiki/%D0%93%D1%80%D0%B0%D1%84_(%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)\">в википедии</a> (хотя там много лишней терминологии), или <a href=\"https://pythontutor.ru/lessons/graphs/\">здесь</a> (там реализация на питоне, но, я думаю, вы догадаетесь, как это сделать на паскале), или <a href=\"https://school29.smoladmin.ru/arbuzov/vvedenie.html\">здесь</a> (тут несколько страниц). Вам пока надо только понимать, что такое граф, знать ряд определений, и уметь хранить графы в программе. Из способов хранения графа вам пока будет достаточно матрицы смежности, про остальные можете прочитать для сведения. Обходы графа вам пока не нужны (до следующей темы)."),
        problem(176),
        problem(177),
        problem(174),
        problem(175),
        problem(474),
        problem(479),
    ])

export default level_3A = () ->
    return level("3А", [
        topic_module_48572(),
        topic_module_24698(),
        topic_16274(),
        topic_16277(),
        topic_16282(),
    ])